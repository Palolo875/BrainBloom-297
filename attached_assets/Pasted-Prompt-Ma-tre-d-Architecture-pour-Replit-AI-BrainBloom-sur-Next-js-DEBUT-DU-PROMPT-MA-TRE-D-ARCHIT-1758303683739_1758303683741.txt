Prompt Maître d'Architecture pour Replit AI : BrainBloom sur Next.js[DEBUT DU PROMPT MAÎTRE D'ARCHITECTURE]1. Mission et Rôle•Ta Mission : Tu es un développeur Full-Stack expert en Next.js (App Router). Ta mission est de construire l'architecture backend et la structure de données pour l'application "BrainBloom". Tu dois suivre ce plan à la lettre.•Règle d'Or : FIDÉLITÉ ABSOLUE À L'ARCHITECTURE. N'introduis aucune complexité ou dépendance non demandée. L'objectif est une architecture propre, moderne et sécurisée.2. Architecture Technique de Référence (La Seule Source de Vérité)•Framework : Next.js 14+ (App Router). Nous utilisons ses fonctionnalités les plus modernes.•Base de Données & Auth : Supabase. C'est notre backend principal pour les données et l'authentification.•IA (Embeddings) : API d'inférence Hugging Face. C'est notre service externe pour la génération de vecteurs.•Déploiement Cible : Vercel.3. Directives d'Exécution Impératives (LES RÈGLES D'OR)•Règle #1 : Priorité aux "Server Components".•Par défaut, tous les composants de page doivent être des Server Components. Ils peuvent communiquer directement et de manière sécurisée avec Supabase.•N'utilise la directive "use client" que lorsque c'est absolument nécessaire (pour les interactions, les animations, les hooks comme useState).•Règle #2 : Gestion des Secrets via .env.local.•Toutes les clés (SUPABASE_URL, SUPABASE_KEY, HF_TOKEN) doivent être stockées dans un fichier .env.local à la racine. Ce fichier est ignoré par Git.•Pour accéder à ces clés, utilise les variables d'environnement de Next.js (process.env.VOTRE_CLE). N'expose jamais une clé secrète côté client.•Règle #3 : Le Modèle de Communication.•Pour lire des données : Les Server Components appellent directement Supabase (await supabase.from(...).select()).•Pour modifier des données (Créer/Modifier/Supprimer) : Utilise des Server Actions. C'est la méthode privilégiée.•Pour l'IA externe : Crée un unique Route Handler (app/api/embed/route.ts) qui agit comme un proxy sécurisé vers Hugging Face.4. Plan d'Exécution Détaillé (Instructions Pas-à-Pas)Phase 1 : Initialisation et Configuration•Instruction #1 : Création du Projet.•"Crée un nouveau projet Next.js en utilisant la dernière version disponible, avec TypeScript et Tailwind CSS."•Instruction #2 : Configuration de l'Environnement.•"Crée un fichier .env.example à la racine avec le contenu suivant :"# Supabase
SUPABASE_URL="VOTRE_URL_SUPABASE_ICI"
SUPABASE_ANON_KEY="VOTRE_CLE_ANON_SUPABASE_ICI"
# Hugging Face
HF_TOKEN="VOTRE_TOKEN_HUGGING_FACE_ICI"
•"Assure-toi que le fichier .gitignore contient bien la ligne .env.local."•Instruction #3 : Création du Client Supabase.•"Installe @supabase/supabase-js."•"Crée un fichier src/lib/supabase/client.ts pour le client Supabase côté client (navigateur), qui utilise les variables d'environnement publiques (NEXT_PUBLIC_...)."•"Crée un fichier src/lib/supabase/server.ts pour le client Supabase côté serveur, qui utilise les clés secrètes depuis process.env."Phase 2 : Construction des Briques Backend•Instruction #4 : Création du Proxy d'Embedding.•"Crée un Route Handler à l'emplacement src/app/api/embed/route.ts."•"Ce handler doit accepter une requête POST avec un JSON { "text": "..." }."•"Il doit lire le HF_TOKEN depuis les variables d'environnement, appeler l'API de Hugging Face pour le modèle sentence-transformers/all-MiniLM-L6-v2, et retourner le vecteur d'embedding."•Instruction #5 : Création de la Première "Server Action".•"Crée un fichier src/app/_actions/notes.ts."•"Dans ce fichier, exporte une fonction asynchrone nommée createNote qui prend content (string) en argument."•"Cette fonction doit :1.Appeler en interne ton propre endpoint /api/embed pour obtenir le vecteur du content.2.Utiliser le client Supabase côté serveur pour insérer la nouvelle note (avec son contenu et son embedding) dans la base de données.3.Utiliser la fonction revalidatePath de Next.js pour rafraîchir la page des notes."Phase 3 : Connexion au Frontend (Exemple)•Instruction #6 : Création d'une Page de Test.•"Crée une page à src/app/test-architecture/page.tsx."•"Cette page doit être un Server Component."•"Dans ce composant, utilise le client Supabase côté serveur pour récupérer et afficher la liste de toutes les notes (await supabase.from('notes').select())."•"Ajoute un formulaire simple avec un <textarea> et un bouton. Ce formulaire doit appeler la Server Action createNote lors de la soumission pour créer une nouvelle note."Instruction Finale :
Exécute ce plan dans l'ordre. L'objectif est d'avoir une architecture Next.js fonctionnelle, sécurisée et prête à être connectée à l'interface utilisateur complète de BrainBloom. La clarté, la sécurité et l'utilisation des fonctionnalités modernes de Next.js sont les priorités absolues.[FIN DU PROMPT MAÎTRE D'ARCHITECTURE]